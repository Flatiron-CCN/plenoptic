name: build
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # weekly
  pull_request:
    branches:
      - main

jobs:
  # based on https://slashgear.github.io/how-to-split-test-by-folder-with-github-action/
  get_test_scripts:
    runs-on: ubuntu-latest
    outputs:
      script: ${{ steps.get-scripts.outputs.script }}
    steps:
      - uses: actions/checkout@v2
      - id: get-scripts
        # it's weird to me, but the quotes around \n should *not* be escaped or it breaks
        run: echo "::set-output name=script::$(ls tests/test*py | jq -R -s -c 'split("\n")[:-1]')"
  get_notebooks:
    runs-on: ubuntu-latest
    outputs:
      notebook: ${{ steps.get-notebooks.outputs.nb }}
    steps:
      - uses: actions/checkout@v2
      - id: get-notebooks
        # it's weird to me, but the quotes around \n should *not* be escaped or it breaks
        run: echo "::set-output name=nb::$(ls examples/*ipynb | jq -R -s -c 'split("\n")[:-1]')"
  notebooks:
    runs-on: ubuntu-latest
    needs: [get_notebooks]
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        notebook: ${{fromJson(needs.get_notebooks.outputs.notebook)}}
      fail-fast: false
    name: Execute notebooks
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: setup.py
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v1
      - name: Install dependencies
        # nbclient 0.5.5 is the first version that includes jupyter execute
        run: |
          pip install --upgrade --upgrade-strategy eager -e .
          pip install jupyter ipywidgets
          pip install "nbclient>=0.5.5"
      - name: Run notebooks
        if: ${{ matrix.notebook != 'examples/Demo_Eigendistortion.ipynb' }}
        run: "jupyter execute ${{ matrix.notebook }}.ipynb --kernel_name=python3"
      - name: Run notebooks
        if: ${{ matrix.notebook == 'examples/Demo_Eigendistortion.ipynb' }}
        # this notebook takes much longer than the rest (if run to completion,
        # ~1hr on a laptop, more than 5 hours on the Github runners). We use
        # papermill's parameters to reduce the max number of steps for
        # eigendistortion synthesis here (we want to test that each cell runs,
        # but we don't need synthesis to go to completion)
        run: |
          pip install --upgrade --upgrade-strategy eager papermill
          papermill ${{ matrix.notebook }} examples/Demo_Eigendistortion_output.ipynb -p max_steps_frontend 10 -p max_steps_vgg 10 -k python3 --cwd examples/
  tests:
    runs-on: ubuntu-latest
    needs: [get_test_scripts]
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        test_script: ${{fromJson(needs.get_test_scripts.outputs.script)}}
      fail-fast: false
    name: Run pytest scripts
    steps:
      - uses: actions/checkout@v2
      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: setup.py
      - name: Install dependencies
        run: |
          # using the --upgrade and --upgrade-strategy eager flags ensures that
          # pip will always install the latest allowed version of all
          # dependencies, to make sure the cache doesn't go stale
          pip install --upgrade --upgrade-strategy eager -e .
          pip install --upgrade --upgrade-strategy eager pytest-cov

      - name: Run tests with pytest
        if: ${{ matrix.test_script == 'tests/test_display.py' }}
        # we have two cores on the linux github action runners:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        run: |
          pip install --upgrade --upgrade-strategy eager pytest-xdist
          pytest -n 2 --cov=plenoptic ${{ matrix.test_script }}
      - name: Run tests with pytest
        if: ${{ matrix.test_script != 'tests/test_display.py' }}
        # only test_display should parallelize across the cores, the others get
        # slowed down by it
        run: 'pytest --cov=plenoptic ${{ matrix.test_script }}'
      - name: Upload to codecov
        run: 'bash <(curl -s https://codecov.io/bash)'
  all_tutorials_in_docs:
    runs-on: ubuntu-latest
    name: Check that all tutorial notebooks are included in docs
    needs: [get_notebooks]
    strategy:
      matrix:
        notebook: ${{fromJson(needs.get_notebooks.outputs.notebook)}}
    steps:
      - uses: actions/checkout@v2
      - name: Check for file
        if: -z "$(grep ${{ matrix.notebook }} docs/tutorials/*nblink)"
        run: exit 1
  no_extra_nblinks:
    runs-on: ubuntu-latest
    name: Check that we don't have any extra nblink files
    steps:
      - uses: actions/checkout@v2
      - name: Check same number of nblink and notebooks
        if: "$(ls docs/tutorials/*nblink | wc -l)" -eq "$(ls examples/*ipynb | wc -l)"
        run: exit 1

  check:
    if: always()
    needs:
      - notebooks
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether all tests and notebooks succeeded
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
